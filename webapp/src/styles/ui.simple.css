/**
 * Simple HTML content.
 * @component .simple
 * @example <div class="ui simple">
 *     <!-- content -->
 * </div>
 */
.simple--inner {
  margin-left: auto;
  margin-right: auto;
  padding: 15px;
}
@media (min-width: 480px) {
  .simple--inner {
    max-width: 476px;
  }
}
@media (min-width: 768px) {
  .simple--inner {
    max-width: 760px;
  }
}
@media (min-width: 992px) {
  .simple--inner {
    max-width: 980px;
  }
}
@media (min-width: 1200px) {
  .simple--inner {
    max-width: 1180px;
  }
}
.simple--inner::after {
  content: "";
  display: block;
  clear: left;
}
.simple .multiple {
  margin: 0;
  padding: 0;
  list-style-type: none;
}
.simple h1,
.simple h2 {
  margin-top: 30px;
  margin-bottom: 15px;
  font-size: 3.4rem;
  font-family: 'hlmt-rounded', Arial, sans-serif;
  color: #2c1200;
}
@media (min-width: 768px) {
  .simple h1,
  .simple h2 {
    font-size: 6rem;
  }
}
.simple h3 {
  font-size: 3.4rem;
  font-family: 'hlmt-rounded', Arial, sans-serif;
}
.simple.as-toggles .simple--content {
  display: none;
/**
             * Show a part with the variation `.as-toggles` class on `.simple` component.
             * @type {state}
             * @name .is-displayed
             * @memberOf .simple--content
             * @example <div class="simple--content is-displayed">
             *     <!-- content -->
             * </div>
             */
}
.simple.as-toggles .simple--content.is-displayed {
  display: block;
}
.simple.as-separator .simple--inner {
  border-bottom: 1px solid #e2e2e2;
  padding-bottom: 15px;
}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3dlYmFwcC9zcmMvc3R5bGVzL3VpLnNpbXBsZS5zdHlsIiwiLi4vd2ViYXBwL3NyYy9zdHlsZXMvdmFyaWFibGVzLnN0eWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7Ozs7Ozs7QUFRSTtFQzZCQSxhQUFZLEtBQVo7RUFDQSxjQUFhLEtBQWI7RUQzQkksU0FBUSxLQUFSOztBQzZCdUI7QUFBQTtJQUN2QixXQUFVLE1BQVY7OztBQUV1QjtBQUFBO0lBQ3ZCLFdBQVUsTUFBVjs7O0FBRXVCO0FBQUE7SUFDdkIsV0FBVSxNQUFWOzs7QUFFdUI7QUFBQTtJQUN2QixXQUFVLE9BQVY7OztBQTRCSjtFQUNJLFNBQVEsR0FBUjtFQUNBLFNBQVEsTUFBUjtFQUNBLE9BQU0sS0FBTjs7QURwRUo7RUFDSSxRQUFPLEVBQVA7RUFDQSxTQUFRLEVBQVI7RUFDQSxpQkFBZ0IsS0FBaEI7O0FBRUo7QUFBSTtFQUNBLFlBQVcsS0FBWDtFQUNBLGVBQWMsS0FBZDtFQUNBLFdBQVUsT0FBVjtFQ05KLGFBQTJCLGtDQUEzQjtFRFFJLE9BQU8sUUFBUDs7QUFFNEI7QUFBQTs7SUFDeEIsV0FBVSxLQUFWOzs7QUFFUjtFQUNJLFdBQVUsT0FBVjtFQ2RKLGFBQTJCLGtDQUEzQjs7QURvQ0k7RUFDSSxTQUFRLEtBQVI7QUFFQTs7Ozs7Ozs7OztBQVNBO0VBQ0ksU0FBUyxNQUFUOztBQVdaO0VBQ0ksZUFBYyxrQkFBZDtFQUNBLGdCQUFlLEtBQWYiLCJmaWxlIjoidWkuc2ltcGxlLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIkBpbXBvcnQgXCJ2YXJpYWJsZXNcIlxyXG5cclxuLyoqXHJcbiAqIFNpbXBsZSBIVE1MIGNvbnRlbnQuXHJcbiAqIEBjb21wb25lbnQgLnNpbXBsZVxyXG4gKiBAZXhhbXBsZSA8ZGl2IGNsYXNzPVwidWkgc2ltcGxlXCI+XHJcbiAqICAgICA8IS0tIGNvbnRlbnQgLS0+XHJcbiAqIDwvZGl2PlxyXG4gKi9cclxuIC5zaW1wbGVcclxuICAgICYtLWlubmVyXHJcbiAgICAgICAgY29udGFpbmVyLW1heCgpXHJcbiAgICAgICAgY2xlYXItbGVmdCgpXHJcbiAgICAgICAgcGFkZGluZyAxNXB4XHJcblxyXG4gICAgLm11bHRpcGxlXHJcbiAgICAgICAgbWFyZ2luIDBcclxuICAgICAgICBwYWRkaW5nIDBcclxuICAgICAgICBsaXN0LXN0eWxlLXR5cGUgbm9uZVxyXG5cclxuICAgIGgxLCBoMlxyXG4gICAgICAgIG1hcmdpbi10b3AgMzBweFxyXG4gICAgICAgIG1hcmdpbi1ib3R0b20gMTVweFxyXG4gICAgICAgIGZvbnQtc2l6ZSAzLjRyZW1cclxuICAgICAgICBobG10LXJvdW5kZWQoKVxyXG4gICAgICAgIGNvbG9yOiAjMmMxMjAwXHJcblxyXG4gICAgICAgIEBtZWRpYSAobWluLXdpZHRoOiBzY3JlZW4tc20pXHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZSA2cmVtXHJcblxyXG4gICAgaDNcclxuICAgICAgICBmb250LXNpemUgMy40cmVtXHJcbiAgICAgICAgaGxtdC1yb3VuZGVkKClcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1hc2sgYWxsIHBhcnQgdGhhdCBub3QgaGF2ZSB0aGUgYGlzLWRpc3BsYXllZGAgY2xhc3MuXHJcbiAgICAgKiBAdHlwZSB7dmFyaWF0aW9ufVxyXG4gICAgICogQG5hbWUgLmFzLXRvZ2dsZXNcclxuICAgICAqIEBtZW1iZXJPZiAuc2ltcGxlXHJcbiAgICAgKiBAZXhhbXBsZSA8ZGl2IGNsYXNzPVwidWkgc2ltcGxlIGFzLXRvZ2dsZXNcIj5cclxuICAgICAqICAgICA8IS0tIGNvbnRlbnQgLS0+XHJcbiAgICAgKiA8L2Rpdj5cclxuICAgICAqL1xyXG4gICAgJi5hcy10b2dnbGVzXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEVhY2ggc2VwYXJhdGUgY29udGVudCBpbiBjYXNlIG9mIG11bHRpcGxlIGNvbnRlbnQuXHJcbiAgICAgICAgICogQGNvbXBvbmVudCAuc2ltcGxlLS1jb250ZW50XHJcbiAgICAgICAgICogQGV4YW1wbGUgPGRpdiBjbGFzcz1cInNpbXBsZS0tY29udGVudFwiPlxyXG4gICAgICAgICAqICAgICA8IS0tIGNvbnRlbnQgLS0+XHJcbiAgICAgICAgICogPC9kaXY+XHJcbiAgICAgICAgICogQHBhcnRvZiAuc2ltcGxlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgJiBeWzBdLS1jb250ZW50XHJcbiAgICAgICAgICAgIGRpc3BsYXkgbm9uZVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFNob3cgYSBwYXJ0IHdpdGggdGhlIHZhcmlhdGlvbiBgLmFzLXRvZ2dsZXNgIGNsYXNzIG9uIGAuc2ltcGxlYCBjb21wb25lbnQuXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHtzdGF0ZX1cclxuICAgICAgICAgICAgICogQG5hbWUgLmlzLWRpc3BsYXllZFxyXG4gICAgICAgICAgICAgKiBAbWVtYmVyT2YgLnNpbXBsZS0tY29udGVudFxyXG4gICAgICAgICAgICAgKiBAZXhhbXBsZSA8ZGl2IGNsYXNzPVwic2ltcGxlLS1jb250ZW50IGlzLWRpc3BsYXllZFwiPlxyXG4gICAgICAgICAgICAgKiAgICAgPCEtLSBjb250ZW50IC0tPlxyXG4gICAgICAgICAgICAgKiA8L2Rpdj5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICYuaXMtZGlzcGxheWVkXHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9ja1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGxhY2UgYSBncmV5IGJhciBzZXBhcmF0b3IgdG8gYm90dG9tLlxyXG4gICAgICogQHR5cGUge3ZhcmlhdGlvbn1cclxuICAgICAqIEBuYW1lIC5hcy1zZXBhcmF0b3JcclxuICAgICAqIEBtZW1iZXJPZiAuc2ltcGxlXHJcbiAgICAgKiBAZXhhbXBsZSA8ZGl2IGNsYXNzPVwidWkgc2ltcGxlIGFzLXNlcGFyYXRvclwiPlxyXG4gICAgICogICAgIDwhLS0gY29udGVudCAtLT5cclxuICAgICAqIDwvZGl2PlxyXG4gICAgICovXHJcbiAgICAmLmFzLXNlcGFyYXRvciBeWzBdLS1pbm5lclxyXG4gICAgICAgIGJvcmRlci1ib3R0b20gMXB4IHNvbGlkICNlMmUyZTJcclxuICAgICAgICBwYWRkaW5nLWJvdHRvbSAxNXB4XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGxvdyB0aGUgVGFicyBtZWNoYW5pc20gdG8gd29yayBmb3Igc2VuZGVycy5cclxuICAgICAqIEBwYXR0ZXJuIC5zaW1wbGUtdGFic1xyXG4gICAgICogQGV4YW1wbGUgPHAgY2xhc3M9XCJ0YWJzIHNpbXBsZS10YWJzIG5vLW1hcmdpblwiPlxyXG4gICAgICogICAgIDxzcGFuIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IGlzLWFjdGl2ZVwiPk92ZXJ2aWV3PC9zcGFuPlxyXG4gICAgICogICAgIDxzcGFuIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+RmVlZGluZyBHdWlkZTwvc3Bhbj5cclxuICAgICAqICAgICA8c3BhbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPkNvbXBvc2l0aW9uPC9zcGFuPlxyXG4gICAgICogPC9wPlxyXG4gICAgICogLnNpbXBsZS10YWJzXHJcbiAgICAgKi8iLCJndXR0ZXIgPSAxNXB4XHJcbnNjcmVlbi14cyA9IDQ4MHB4XHJcbnNjcmVlbi1zbSA9IDc2OHB4XHJcbnNjcmVlbi1tZCA9IDk5MnB4XHJcbnNjcmVlbi1sZyA9IDEyMDBweFxyXG5jb250YWluZXIteHMgPSA0NzZweFxyXG5jb250YWluZXItc20gPSA3NjBweFxyXG5jb250YWluZXItbWQgPSA5ODBweFxyXG5jb250YWluZXItbGcgPSAxMTgwcHhcclxuXHJcbmZvbnQtYXdlc29tZSgpXHJcbiAgICBmb250LWZhbWlseTogJ0ZvbnRBd2Vzb21lJztcclxuXHJcbnRyZWJ1Y2hldCgpXHJcbiAgICBmb250LWZhbWlseTogJ1RyZWJ1Y2hldCBNUycsICdMdWNpZGEgR3JhbmRlJywgJ0x1Y2lkYSBTYW5zIFVuaWNvZGUnLCAnTHVjaWRhIFNhbnMnLCBUYWhvbWEsIHNhbnMtc2VyaWY7XHJcblxyXG5obG10LXJvdW5kZWQoKVxyXG4gICAgZm9udC1mYW1pbHk6ICdobG10LXJvdW5kZWQnLCBBcmlhbCwgc2Fucy1zZXJpZjtcclxuXHJcbmNlbnR1cnktZ290aGljKClcclxuICAgIGZvbnQtZmFtaWx5OiAnTXVsaScsIEFyaWFsLCBzYW5zLXNlcmlmO1xyXG5cclxuY29udGFpbmVyKClcclxuICAgIG1hcmdpbi1yaWdodCBhdXRvXHJcbiAgICBtYXJnaW4tbGVmdCBhdXRvXHJcblxyXG4gICAgQG1lZGlhIChtaW4td2lkdGggc2NyZWVuLXhzKVxyXG4gICAgICAgIHdpZHRoIGNvbnRhaW5lci14c1xyXG5cclxuICAgIEBtZWRpYSAobWluLXdpZHRoIHNjcmVlbi1zbSlcclxuICAgICAgICB3aWR0aCBjb250YWluZXItc21cclxuXHJcbiAgICBAbWVkaWEgKG1pbi13aWR0aCBzY3JlZW4tbWQpXHJcbiAgICAgICAgd2lkdGggY29udGFpbmVyLW1kXHJcblxyXG4gICAgQG1lZGlhIChtaW4td2lkdGggc2NyZWVuLWxnKVxyXG4gICAgICAgIHdpZHRoIGNvbnRhaW5lci1sZ1xyXG5cclxuY29udGFpbmVyLW1heCgpXHJcbiAgICBtYXJnaW4tbGVmdCBhdXRvXHJcbiAgICBtYXJnaW4tcmlnaHQgYXV0b1xyXG5cclxuICAgIEBtZWRpYSAobWluLXdpZHRoIHNjcmVlbi14cylcclxuICAgICAgICBtYXgtd2lkdGggY29udGFpbmVyLXhzXHJcblxyXG4gICAgQG1lZGlhIChtaW4td2lkdGggc2NyZWVuLXNtKVxyXG4gICAgICAgIG1heC13aWR0aCBjb250YWluZXItc21cclxuXHJcbiAgICBAbWVkaWEgKG1pbi13aWR0aCBzY3JlZW4tbWQpXHJcbiAgICAgICAgbWF4LXdpZHRoIGNvbnRhaW5lci1tZFxyXG5cclxuICAgIEBtZWRpYSAobWluLXdpZHRoIHNjcmVlbi1sZylcclxuICAgICAgICBtYXgtd2lkdGggY29udGFpbmVyLWxnXHJcblxyXG5jb2x1bW4oY3VycmVudCwgbWF4LCBndXR0ZXIgPSAwKVxyXG4gICAgaWYgZ3V0dGVyICE9IDBcclxuICAgICAgICB3aWR0aCBcImNhbGMoJXMlIC0gJXMpXCIgJSAoKChjdXJyZW50ICogMTAwKSAvIG1heCkgKGd1dHRlciAqIDIpKVxyXG4gICAgZWxzZVxyXG4gICAgICAgIHdpZHRoICgoY3VycmVudCAqIDEwMCkgLyBtYXgpICVcclxuXHJcbnByZXBlbmQoY3VycmVudCwgbWF4LCBndXR0ZXIgPSAwKVxyXG4gICAgaWYgZ3V0dGVyICE9IDBcclxuICAgICAgICBtYXJnaW4tbGVmdCBcImNhbGMoJXMlICsgJXMpXCIgJSAoKChjdXJyZW50ICogMTAwKSAvIG1heCkgZ3V0dGVyKVxyXG4gICAgZWxzZVxyXG4gICAgICAgIG1hcmdpbi1sZWZ0ICgoY3VycmVudCAqIDEwMCkgLyBtYXgpICVcclxuXHJcbmFwcGVuZChjdXJyZW50LCBtYXgpXHJcbiAgICBpZiBndXR0ZXIgIT0gMFxyXG4gICAgICAgIG1hcmdpbi1yaWdodCBcImNhbGMoJXMlICsgJXMpXCIgJSAoKChjdXJyZW50ICogMTAwKSAvIG1heCkgZ3V0dGVyKVxyXG4gICAgZWxzZVxyXG4gICAgICAgIG1hcmdpbi1yaWdodCAoKGN1cnJlbnQgKiAxMDApIC8gbWF4KSAlXHJcblxyXG5wdWxsKGN1cnJlbnQsIG1heClcclxuICAgIHJpZ2h0ICgoY3VycmVudCAqIDEwMCkgLyBtYXgpICVcclxuXHJcbnB1c2goY3VycmVudCwgbWF4KVxyXG4gICAgbGVmdCAoKGN1cnJlbnQgKiAxMDApIC8gbWF4KSAlXHJcblxyXG5cclxuY2xlYXItbGVmdCgpXHJcbiAgICAmOjphZnRlclxyXG4gICAgICAgIGNvbnRlbnQgXCJcIlxyXG4gICAgICAgIGRpc3BsYXkgYmxvY2tcclxuICAgICAgICBjbGVhciBsZWZ0Il19 */